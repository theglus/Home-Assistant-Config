#################################################################
## Door Icon
#################################################################
styles:
  custom_fields:
    icon:
      - width: 80%
      - margin-left: -15%
custom_fields:
  icon: >
    [[[
      const room = 'd="M11.4,1.4h27.2v43.1H11.4V1.4z" fill="#bcbcbc"';
      const door = 'd="M11.4 1.4v43.1h27.2V1.4H11.4zm23 23.4c0 1.1-.9 1.9-1.9 1.9h0c-1.1 0-1.9-.9-1.9-1.9V21c0-1.1.9-1.9 1.9-1.9h0c1.1 0 1.9.9 1.9 1.9v3.8z"';
      if (variables.state === 'on' && variables.timeout < 2000) {
        return `
          <style>
            .state {
              animation: state 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
            }
            .opacity {
              animation: opacity 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
            }
            @keyframes state {
              0% {
                transform: none;
                fill: #9da0a2;
              }
              100% {
                transform: skewY(10deg) translate(4.5%, -3.9%) scaleX(0.8);
                fill: #b68349;
              }
            }
            @keyframes opacity {
              0% {
                opacity: 0;
              }
              100% {
                opacity: 1;
              }
            }
          </style>
          <svg viewBox="0 0 50 50">
            <path class="opacity" ${room}/>
            <path class="state" ${door}/>
          </svg>
        `;
      }
      if (variables.state === 'on' && variables.timeout > 2000) {
        return `
          <svg viewBox="0 0 50 50">
            <style>
              .state_timeout_on {
                transform: skewY(10deg) translate(4.5%, -3.9%) scaleX(0.8);
                fill: #b68349;
              }
            </style>
            <path ${room}/>
            <path class="state_timeout_on" ${door}/>
          </svg>
        `;
      }
      return variables.state === 'off' && variables.timeout < 2000 ? `
        <style>
          .state {
            animation: state 0.4s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
          }
          .opacity {
            animation: opacity 0.4s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
          }
          .reverse {
            animation-direction: reverse;
          }
          @keyframes state {
            0% {
              transform: none;
              fill: #9da0a2;
            }
            100% {
              transform: skewY(10deg) translate(4.5%, -3.9%) scaleX(0.8);
              fill: #b68349;
            }
          }
          @keyframes opacity {
            0% {
              opacity: 0;
            }
            100% {
              opacity: 1;
            }
          }
        </style>
        <svg viewBox="0 0 50 50">
          <path class="opacity reverse" ${room}/>
          <path class="state reverse" ${door}/>
        </svg>
      ` : `
        <svg viewBox="0 0 50 50">
          <style>
            .state_timeout_off {
              fill: var(--state-icon-color);
            }
          </style>
          <path class="state_timeout_off" ${door}/>
        </svg>
      `;
    ]]]
