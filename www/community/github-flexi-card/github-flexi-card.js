!function(){"use strict";var t=t||Object.getPrototypeOf(customElements.get("home-assistant-main"));const{html:i,css:e}=t.prototype,s=e`.truncate{white-space: nowrap;text-overflow: ellipsis;overflow: hidden;}.card-content > div{margin-bottom: 8px;}.card-content > div:last-child{margin-bottom: 0;}`,a=t=>console.error("[github-flexi-card] "+t),n=(...t)=>t.reduce(((t,i)=>void 0!==t?t:i)),r=(t,i)=>{switch(typeof t){case"string":const e={};return e[i]=t,e;case"object":return Object.assign({},t)}return t},o=t=>Array.isArray(t)?t:t?[t]:[];const c=t=>i`
<div class="card-header">
    <div class="truncate">
        ${t}
    </div>
</div>
`,l=(t,i)=>{const e=r(t,"entity");return e.attributes=n(e.attributes,i.attributes),e.attribute_urls=n(e.attribute_urls,i.attribute_urls),e.icon=n(e.icon,i.icon),e.name=n(e.name,i.name),e.secondary_info=n(e.secondary_info,i.secondary_info),e.url=n(e.url,i.url),e.compact_view=n(e.compact_view,i.compact_view,!0),e};class h{constructor(t,i){this.data=t,this.data.state||(this.data.state=i)}process(t){return t?t.replace(/\{([^\}]+)\}/g,((t,i)=>this.replaceKeyword(i,t))):t}replaceKeyword(t,i){const e=t.split(":"),s=e[0],a=e[1],n=this.data[s];if(void 0===n)return i;return this.getProcessor(a)(n)}getProcessor(t){if(!t)return t=>t;if(t.includes("=")){const i=t.split("=");return t=>t.replace(i[0],i[1])}return t=>t}}const d=e`:host{--attribute-icon-size: 20px;}.truncate{white-space: nowrap;text-overflow: ellipsis;overflow: hidden;}.clickable{cursor: pointer;}.entity-spacing:first-child{margin-top: 0;}.entity-spacing:last-child{margin-bottom: 0;}.entity-row{display: flex;align-items: center;}.entity-row .name{flex: 1;margin: 0 6px;}.entity-row .secondary{color: var(--primary-color);}.entity-row .icon{flex: 0 0 40px;display: flex;justify-content: center;align-items: center;border-radius: 50%;text-align: center;height: 40px;margin-right: 10px;}.compact-view .state{--mdc-icon-size: var(--attribute-icon-size);font-size: var(--paper-font-caption_-_font-size);}.state{display: flex;margin-left: 7px;}.state > *{margin-left:5px;}.state > *:first-child{margin-left: 0;}.state > div{line-height: 24px;}.compact-view .state{flex-direction: column;align-items: center;margin-left: 10px;}.compact-view .state > div{line-height: normal;}.compact-view .state > .label{margin-top: 1px;color: var(--primary-color);line-height: var(--attribute-icon-size);}.compact-view .state > *{margin: 0;}`;const u=t=>i`
<div class="state${t.action?" clickable":""}" @click="${t.action}" title="${t.tooltip}">
    ${t.label&&i`<div class="label">${t.label}</div>`}
    ${t.icon&&!t.label?i`<ha-icon icon="${t.icon}" style="color: var(--primary-color)"></ha-icon>`:null}
    <div>${t.value}</div>
</div>
`,p={open_issues:"mdi:alert-circle-outline",open_pull_requests:"mdi:source-pull",stargazers:"mdi:star",forks:"mdi:source-fork",latest_release_tag:"mdi:tag-outline",clones:"mdi:download-outline",clones_unique:"mdi:download-outline",views:"mdi:eye",views_unique:"mdi:eye-check"},m={open_issues:"issues",open_pull_requests:"pulls",stargazers:"stargazers",forks:"network/members",latest_release_tag:"releases",clones:"graphs/traffic",clones_unique:"graphs/traffic",views:"graphs/traffic",views_unique:"graphs/traffic",home:""},f=(t,i,e,s)=>{switch(typeof i){case"boolean":if(!i)return;return e?void 0===!m[t]?void a(`Sorry url cannot be built for "${t}"`):()=>window.open(`https://github.com/${e}/${m[t]}`):void a("Cannot build url - entity path attribute is missing");case"string":return()=>window.open(s.process(i));case"undefined":break;default:a("Unsupported url type: "+typeof i)}},g=(t,i,e)=>o(t.attributes).map((s=>(s=r(s,"name"),{value:i[s.name],tooltip:y(s.name),icon:s.icon||p[s.name],label:s.label&&e.process(s.label),action:f(s.name,void 0!==s.url?s.url:t.attribute_urls,i.path,e)}))),y=t=>t.substr(0,1).toUpperCase()+t.substr(1).replace(/_/g," ");customElements.define("github-entity",class extends t{constructor(){super(...arguments),this.config=null,this.icon="mdi:github",this.name="",this.secondaryInfo=null,this.attributesData=[],this.compact_view=!0,this.entityData=null,this.attributesUpdated=!1}static get styles(){return d}static get properties(){return{icon:{type:String},name:{type:String},secondaryInfo:{type:String},attributesData:{type:Array},action:{type:Function},compact_view:{type:Boolean}}}set hass(t){this.config&&(this.attributesUpdated=!1,this.entityData=t.states[this.config.entity],this.processHassUpdate())}setConfig(t){const i=JSON.stringify(this.config),e=JSON.stringify(t);i!=e&&(t.entity?(this.config=JSON.parse(e),this.name=t.name||t.entity,t.icon&&(this.icon=t.icon),t.secondary_info&&(this.secondaryInfo=t.secondary_info),this.compact_view=n(t.compact_view,!0),this.entityData&&this.processHassUpdate()):a("Missing 'entity' property in entity configuration"))}render(){return i`
        <div class="entity-row${this.compact_view?" compact-view":""}">
            <div class="icon">
                <ha-icon icon="${this.icon}"></ha-icon>
            </div>
            <div class="name truncate${this.action?" clickable":""}" @click="${this.action}">
                ${this.name}
                ${this.secondaryInfo&&i`<div class="secondary">${this.secondaryInfo}</div>`}
            </div>
            ${this.attributesData.map(u)}
        <div>
        `}getEntityAttributeValues(t){return t.map((t=>{var i;return(null===(i=this.entityData)||void 0===i?void 0:i.attributes[t])||0}))}processHassUpdate(){if(!this.entityData)return void a("Entity not found: "+this.config.entity);const t=new h(this.entityData.attributes,this.entityData.state);this.name=t.process(this.config.name)||this.entityData.attributes.friendly_name,this.icon=this.config.icon||this.entityData.attributes.icon,this.config.secondary_info&&(this.secondaryInfo=t.process(this.config.secondary_info));const i=g(this.config,this.entityData.attributes,t);JSON.stringify(i)!=JSON.stringify(this.attributesData)&&(this.attributesData=i,this.attributesUpdated=!0),this.url!=this.config.url&&(this.url=this.config.url,this.action=f("home",this.url,this.entityData.attributes.path,t))}}),customElements.define("github-flexi-card",class extends t{constructor(){super(...arguments),this.cardTitle="",this.entities=[],this.cardSize=0,this.order=[]}static get styles(){return s}static get properties(){return{cardTitle:{type:String},entities:{type:Array},order:{type:Array}}}set hass(t){if(this.entities.forEach((i=>i.hass=t)),this.sortOptions&&this.sortOptions.length){const t=this.sortOptions.map((t=>t.by)),i=this.entities.map((i=>i.getEntityAttributeValues(t))),e=(t,i,e)=>e?t-i:i-t,s=this.entities.map(((t,i)=>i)).sort(((t,s)=>i[t].reduce(((t,a,n)=>0!=t?t:e(a,i[s][n],this.sortOptions[n].ascending)),0)));this.order.some(((t,i)=>t!=s[i]))&&(this.order=s)}}setConfig(t){this.cardTitle=t.title,this.cardSize=0,this.cardTitle&&this.cardSize++,this.entities.length!=t.entities.length?this.entities=t.entities.map((i=>l(i,t))).map((t=>{const i=document.createElement("github-entity");return i.setConfig(t),this.cardSize++,i})):this.entities.forEach(((i,e)=>i.setConfig(l(t.entities[e],t)))),this.order=this.entities.map(((t,i)=>i));const i=o(t.sort).map((t=>r(t,"by")));this.sortOptions=i}getCardSize(){return this.cardSize}render(){return i`
        <ha-card>
            ${this.cardTitle&&c(this.cardTitle)}
            <div class="card-content">
                ${this.order.map((t=>i`<div>${this.entities[t]}</div>`))}
            </div>
        </ha-card>
        `}}),console.info("%c GITHUB-FLEXI-CARD %c 1.0.0","color: white; background: #cca900; font-weight: 700;","color: #cca900; background: white; font-weight: 700;")}();
//# sourceMappingURL=github-flexi-card.js.map
